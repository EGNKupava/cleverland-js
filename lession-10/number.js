"use strict";

// В JavaScript можно использовать букву "e", чтобы укоротить запись числа. Она добавляется к числу и заменяет указанное количество нулей:
let billion = 1e9;
console.log("billion: ", billion);

// очень маленькое число

let ms = 1e-6;
console.log("ms: ", ms);

// Шестнадцатеричные, двоичные и восьмеричные числа

const num = 923;

console.log("num.toString(16): ", num.toString(16));
console.log("num.toString(2): ", num.toString(2));
//base может варьироваться от 2 до 36 (по умолчанию 10).
//Внимание! Две точки в 123456..toString(36) это не опечатка. Если нам надо вызвать метод непосредственно на числе, как toString в примере выше, то нам надо поставить две точки .. после числа.

// Округление
// Одна из часто используемых операций при работе с числами – это округление.

// В JavaScript есть несколько встроенных функций для работы с округлением:

Math.floor;
// Округление в меньшую сторону: 3.1 становится 3, а -1.1 — -2.
Math.ceil;
// Округление в большую сторону: 3.1 становится 4, а -1.1 — -1.
Math.round;
// Округление до ближайшего целого: 3.1 становится 3, 3.6 — 4, а -1.1 — -1.
// Math.trunc (не поддерживается в Internet Explorer)
// Производит удаление дробной части без округления: 3.1 становится 3, а -1.1 — -1.
// Ниже представлена таблица с различиями между функциями округления:

// Math.floor	Math.ceil	Math.round	Math.trunc
// 3.1  	3	      4	      3	            3
// 3.6	    3	    4     	4	           3
// -1.1	    -2    -1    	-1        	-1
// -1.6	    -2    -1    	-2        	-1

const numm = 13.123150497320847;
// Метод toFixed(n) округляет число до n знаков после запятой и возвращает строковое представление результата.
console.log("toFixed(n)", +numm.toFixed(4));

// Неточные вычисления
console.log("0.1 + 0.2 == 0.3: ", 0.1 + 0.2 == 0.3);

//Проверка: isFinite и isNaN
//isNaN(value) преобразует значение в число и проверяет является ли оно NaN:
console.log("NAN", +"lksjhdfl");
// Нужна ли нам эта функция? Разве не можем ли мы просто сравнить === NaN? К сожалению, нет. Значение NaN уникально тем, что оно не является равным ни чему другому, даже самому себе:

// console.log( NaN === NaN ); // false

// Иногда isFinite используется для проверки, содержится ли в строке число:
// вернёт true всегда, кроме ситуаций, когда аргумент - Infinity/-Infinity или не число
let num = +prompt("Enter a number", "");
console.log(isFinite(num));

// Object.is
// Существует специальный метод Object.is, который сравнивает значения примерно как ===, но более надёжен в двух особых ситуациях:

// Работает с NaN: Object.is(NaN, NaN) === true, здесь он хорош.
// Значения 0 и -0 разные: Object.is(0, -0) === false, это редко используется, но технически эти значения разные.
// Во всех других случаях Object.is(a, b) идентичен a === b.

// /parseInt и parseFloat

console.log(parseInt("100px")); // 100
console.log(parseFloat("12.5em")); // 12.5

// Второй аргумент parseInt(str, radix)
// Функция parseInt() имеет необязательный второй параметр. Он определяет систему счисления, таким образом parseInt может также читать строки с шестнадцатеричными числами, двоичными числами и т.д.:

// Другие математические функции
// В JavaScript встроен объект Math, который содержит различные математические функции и константы.

// Несколько примеров:

// Math.random()
// Math.max(a, b, c...) / Math.min(a, b, c...)
// Возвращает наибольшее/наименьшее число из перечисленных аргументов.

// alert( Math.max(3, 5, -10, 0, 1) ); // 5
// alert( Math.min(1, 2) ); // 1
// Math.pow(n, power)
